# Project Euler Problem 61
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

# Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
# Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
# Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
# Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

# The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

import time
from itertools import permutations
start = time.time()
import sys

def GenerateSequence(a):
    l = []
    n = 1
    s = a + 1
    while len(str(n)) < 5:
        while len(str(n)) < 4:
            n = n + s
            s = s + a
        l.append([str(n)[:2], str(n)[2:]])
        n = n + s
        s = s + a
    return l

tri, sq, pent, hexa, hep, octa = [], [], [], [], [], []

seq = [tri, sq, pent, hexa, hep, octa]

for i in range(len(seq)):
    seq[i] = GenerateSequence(i + 1)

tri, sq, pent, hexa, hep, octa = seq

search = permutations([i for i in range(1, 6)], 5)

answer  = []

for i in search:
    for j in tri:
        answer = [j]
        for k in seq[i[0]]:
            if j[1] == k[0]:
                answer = [j, k]
                for l in seq[i[1]]:
                    if k[1] == l[0]:
                        answer = [j, k, l]
                        for m in seq[i[2]]:
                            if l[1] == m[0]:
                                answer = [j, k, l, m]
                                for n in seq[i[3]]:
                                    if m[1] == n[0]:
                                        answer = [j, k, l, m, n]
                                        for o in seq[i[4]]:
                                            if n[1] == o[0]:
                                                answer = [j, k, l, m, n, o]
                                                if o[1] == j[0]:
                                                    print("Found it!")
                                                    s = 0
                                                    for a in answer:
                                                        s = s + int(a[0] + a[1])
                                                    print("Final sum: ", s)
                                                    end = time.time()
                                                    print("Running time:", end - start)
                                                    sys.exit()